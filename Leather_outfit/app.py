import os
import time
from flask import Flask, send_from_directory, render_template, request, redirect, url_for, flash, session, jsonify, abort
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
from flask_login import LoginManager, login_user, UserMixin, logout_user, login_required, current_user
from werkzeug.security import generate_password_hash, check_password_hash
from werkzeug.utils import secure_filename
from datetime import datetime
import logging
from downloader_parser_edition import YouTubeBackup
from sqlalchemy import text
from elasticsearch import Elasticsearch 
import jinja2
import humanize
import logging
import requests
import json
import psycopg2

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CONFIG = {
    "storage_path": "/mnt/d/videos",
    "db_uri": "postgresql://impostorboy:0@localhost/youtube_backup"
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
app = Flask(__name__)
app.add_url_rule('/videos/<path:filename>', endpoint='videos', view_func=lambda filename: send_from_directory(CONFIG['storage_path'], filename))

es = Elasticsearch([{'host': 'localhost', 'port': 9200, 'scheme': 'http'}])

app.config['SQLALCHEMY_DATABASE_URI'] = CONFIG['db_uri']
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.secret_key = 'suck_some_dick'

db = SQLAlchemy(app)
migrate = Migrate(app, db)

logging.basicConfig(
    level=logging.INFO,  # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("app.log"),  # –õ–æ–≥ –≤ —Ñ–∞–π–ª
        logging.StreamHandler()  # –õ–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask-Login
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è YouTube Backup
backup = YouTubeBackup()



def update_interests(username, interests):
    conn = psycopg2.connect(
        dbname="youtube_backup",
        user="your_user", 
        password="your_password", 
        host="localhost", 
        port="5432"
    )
    cursor = conn.cursor()

    query = """
    UPDATE "user"
    SET interests = %s
    WHERE "user" = %s
    """
    
    interests_json = json.dumps({"interests": interests})
    
    cursor.execute(query, (interests_json, username))
    conn.commit()
    
    cursor.close()
    conn.close()







# –ú–æ–¥–µ–ª—å –¥–ª—è –≤–∏–¥–µ–æ
class Video(db.Model):
    __tablename__ = 'videos'

    id = db.Column(db.String(11), primary_key=True)
    title = db.Column(db.String(200), nullable=False)
    description = db.Column(db.String(5000), nullable=True)
    upload_date = db.Column(db.DateTime, default=datetime.utcnow)
    views = db.Column(db.Integer, default=0)
    uploader = db.Column(db.String)

    def __repr__(self):
        return f'<Video {self.title}>'

# –ú–æ–¥–µ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class User(db.Model, UserMixin):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(100), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password_hash = db.Column(db.String(256), nullable=False)
    avatar = db.Column(db.String(200), nullable=True)
    user_data = db.Column(db.JSON, nullable=True)

    def set_password(self, password):
        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.password_hash, password)

    def generate_user_data(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º JSON –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_data = {
            "username": self.username,
            "email": self.email,
            "avatar": self.avatar,
            "last_login": str(datetime.utcnow())
        }
        return user_data

    def save_user_data(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        self.user_data = self.generate_user_data()
        db.session.commit()
        
# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è Flask-Login
@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ –∫ –ø—Ä–µ–≤—å—é—à–∫–µ
def get_thumbnail_path(video_id):
    try:
        thumbnail_name = f"{video_id}.webp"  # –ù–∞–ø—Ä–∏–º–µ—Ä: "90.webp"
        full_path = os.path.join(CONFIG['storage_path'], thumbnail_name)
        
        print(f"üîç –ü–æ–∏—Å–∫ –ø—Ä–µ–≤—å—é: {full_path}")
        if os.path.exists(full_path):
            return url_for('stream_thumbnail', filename=thumbnail_name)
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

def format_views(views):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥."""
    try:
        if views is None:
            return "0"
        
        # Convert to int if it's a string
        views_int = int(views) if isinstance(views, str) else views
        
        if views_int >= 1_000_000:
            return f"{views_int / 1_000_000:.1f} –º–ª–Ω"
        elif views_int >= 1_000:
            return f"{views_int / 1_000:.1f} —Ç—ã—Å"
        return str(views_int)
    except (ValueError, TypeError) as e:
        logging.error(f"Error formatting views: {e}")
        return str(views) if views is not None else "0"

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.route('/')
def index():
    query = request.args.get('query', '')
    if query:
        result = db.session.execute(
            text("SELECT id, title, description, upload_date, views, uploader FROM videos WHERE title LIKE :query"),
            {"query": f"%{query}%"}
        ).fetchall()
    else:
        result = db.session.execute(
            text("SELECT id, title, description, upload_date, views, uploader FROM videos")
        ).fetchall()

    columns = ['id', 'title', 'description', 'upload_date', 'views', 'uploader']
    videos = [
        {
            'id': row[0],
            'title': row[1],
            'thumbnail_path': get_thumbnail_path(row[0]),  # –ü–µ—Ä–µ–¥–∞—ë–º —Ç–æ–ª—å–∫–æ ID!
            'views': format_views(row[4])
        }
        for row in result
    ]
    return render_template('index.html', videos=videos)

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        try:
            username = request.form['username']
            email = request.form['email']
            password = request.form['password']
            avatar = request.files.get('avatar')

            if User.query.filter_by(username=username).first():
                flash('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
                return redirect(url_for('register'))
            
            if User.query.filter_by(email=email).first():
                flash('Email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω')
                return redirect(url_for('register'))
            
            avatar_path = None
            if avatar and avatar.filename:
                avatar_dir = 'static/avatars'
                os.makedirs(avatar_dir, exist_ok=True)
                avatar_filename = f'{username}_{int(time.time())}.webp'
                avatar_path = os.path.join(avatar_dir, avatar_filename)
                avatar.save(avatar_path)

            new_user = User(username=username, email=email)
            new_user.set_password(password)
            new_user.avatar = avatar_path
            db.session.add(new_user)
            db.session.commit()

            flash('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏.')
            return redirect(url_for('login'))
        except Exception as e:
            db.session.rollback()
            logging.error(f"Registration error: {e}")
            flash('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')
            return redirect(url_for('register'))

    return render_template('register.html')

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        try:
            username = request.form['username']
            password = request.form['password']

            user = User.query.filter_by(username=username).first()

            if user and user.check_password(password):
                login_user(user)
                user.save_user_data()
                return redirect(url_for('dashboard'))

            flash('–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å.')
        except Exception as e:
            logging.error(f"Login error: {e}")
            flash('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ')

    return render_template('login.html')

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã—Ö–æ–¥–∞
@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('login'))

@app.template_filter('format_number')
def format_number(value):
    try:
        return humanize.intcomma(value)
    except:
        return value

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Ñ–∏–ª—è
@app.route('/dashboard')
@login_required
def dashboard():
    if not current_user.is_authenticated:
        return redirect(url_for('login'))  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω

    return render_template('dashboard.html', user=current_user)
# –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫—É
@app.route('/zapros-na-postavku', methods=['GET', 'POST'])
def zapros_na_postavku():
    if request.method == 'POST':
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
            action = request.form.get('action')
            query = request.form.get('query')
            count = int(request.form.get('count', 10))
            min_views = int(request.form.get('min_views', 0))
            min_duration = int(request.form.get('min_duration', 0))
            max_duration = int(request.form.get('max_duration', 0)) or float('inf')

            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            logging.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: action={action}, query={query}, count={count}, "
                         f"min_views={min_views}, min_duration={min_duration}, max_duration={max_duration}")

            if action == 'search_and_download':
                # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –¥–µ–π—Å—Ç–≤–∏—è
                logging.info("–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–æ–∏—Å–∫ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ...")
                backup.search_and_download(query, count, min_views, min_duration, max_duration)

                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∏–¥–µ–æ
                videos = db.session.execute(text("SELECT * FROM videos")).fetchall()
                columns = db.session.execute(text("SELECT * FROM videos LIMIT 1")).keys()

                formatted_videos = [
                    {**dict(zip(columns, row)), 'thumbnail_path': get_thumbnail_path(row[0])}
                    for row in videos
                ]

                # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
                logging.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω—ã, –Ω–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ: {len(formatted_videos)}")

                flash('–ü–æ–∏—Å–∫ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!')
                return redirect(url_for('index'))

        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            flash('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ')

    return render_template('zapros_na_postavku.html')
# –°—Ç—Ä–∏–º–∏–Ω–≥ –ø—Ä–µ–≤—å—é
@app.route('/thumbnails/<path:filename>')
def stream_thumbnail(filename):
    try:
        full_path = os.path.join(CONFIG['storage_path'], filename)
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –ø—Ä–µ–≤—å—é: {full_path}")  # ‚Üê –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
        return send_from_directory(CONFIG['storage_path'], filename)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ–≤—å—é: {e}")
        return "Not Found", 404








@app.route('/video/<video_id>')
def video_detail(video_id):
    try:
        print(f"üîç –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ —Å ID: {video_id}")
        result = db.session.execute(
            text("SELECT * FROM videos WHERE id = :id"), 
            {"id": video_id}
        ).fetchone()

        if not result:
            print(f"‚ùå –í–∏–¥–µ–æ —Å ID {video_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return "Video not found", 404

        video_dict = dict(result._mapping)
        video_dict['thumbnail_path'] = f"/thumbnails/{video_id}.webp"
        
        # –ò—â–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        video_dir = CONFIG['storage_path']
        for file in os.listdir(video_dir):
            if file.startswith(video_id):
                ext = file.split('.')[-1]
                if ext in ['webm', 'mp4', 'f616']:
                    video_dict[f'file_path_{ext}'] = file
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {file}")

        return render_template('video.html', video=video_dict)
    except Exception as e:
        logging.error(f"Video detail error: {e}")
        flash("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ")
        return redirect(url_for('index'))

@app.route('/stream/<filename>')
def stream_video(filename):
    video_dir = CONFIG['storage_path']
    video_path = os.path.join(video_dir, filename)
    
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–∏ –∫ –≤–∏–¥–µ–æ: {video_path}")

    if os.path.exists(video_path):
        print(f"üì§ –°—Ç—Ä–∏–º–∏–º –≤–∏–¥–µ–æ: {video_path}")
        return send_from_directory(video_dir, filename, as_attachment=False)

    print(f"‚ùå –í–∏–¥–µ–æ {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    abort(404)
    
if __name__ == '__main__':
    app.run(debug=True)
